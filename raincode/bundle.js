/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.ts":
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
/***/ (() => {

eval("\nlet animationInterval = null;\nlet canvas = null;\nfunction rainCode(rainCodeStr = \"TSDJXHS1010\", fillStyle = '#0f0') {\n    const width = window.innerWidth;\n    const height = window.innerHeight;\n    rainCodeStr = (rainCodeStr === null || rainCodeStr === void 0 ? void 0 : rainCodeStr.toUpperCase()) || 'TSDJXHS1010';\n    const rainCodeArr = rainCodeStr.split('');\n    canvas = document.createElement('canvas');\n    canvas.width = width;\n    canvas.height = height;\n    const ctx = canvas.getContext('2d');\n    let positionY = Array.from({ length: width / 15 }, () => 0);\n    const colors = ['#rgb(234, 5, 250)', 'rgb(106, 6, 194)', 'rgb(19, 6, 194)', 'rgb(6, 194, 62)', 'rgb(168, 218, 19)'];\n    animationInterval = setInterval(() => {\n        ctx.fillStyle = 'rgba(0,0,0,0.05)';\n        ctx.fillRect(0, 0, width, height);\n        ctx.fillStyle = fillStyle || '#0f0';\n        ctx.font = '15px Arial';\n        for (let i = 0; i < positionY.length; i++) {\n            ctx.fillText(rainCodeArr[Math.floor(Math.random() * rainCodeArr.length)], i * 15, positionY[i]);\n            positionY[i] = positionY[i] > height || positionY[i] > Math.random() * 10000 ? 0 : positionY[i] + 15;\n        }\n    }, 50);\n    document.body.appendChild(canvas);\n}\nfunction setting() {\n    const textInput = document.getElementById('text-input');\n    const colorOptions = document.querySelectorAll('.color-option');\n    const customColorInput = document.getElementById('custom-color');\n    const customColorText = document.getElementById('custom-color-text');\n    const applyBtn = document.getElementById('apply-btn');\n    const previewText = document.getElementById('preview-text');\n    const floatingPanel = document.getElementById('floating-panel');\n    const panelHeader = document.getElementById('panel-header');\n    const minimizeBtn = document.getElementById('minimize-btn');\n    const closeBtn = document.getElementById('close-btn');\n    const restoreBtn = document.getElementById('restore-btn');\n    let selectedColor = '#22C55E';\n    let isDragging = false;\n    let offsetX, offsetY;\n    let initialX, initialY;\n    // 点击颜色选项\n    colorOptions.forEach(option => {\n        option.addEventListener('click', function () {\n            var _a;\n            // 移除之前选中的样式\n            (_a = document.querySelector('.color-option.border-2')) === null || _a === void 0 ? void 0 : _a.classList.remove('border-2', 'border-white', 'ring-2', 'ring-offset-2', 'ring-primary');\n            // 添加选中样式\n            this.classList.add('border-2', 'border-white', 'ring-2', 'ring-offset-2', 'ring-primary');\n            // 更新选中的颜色\n            selectedColor = this.getAttribute('data-color');\n            // 更新自定义颜色输入框（带空值判断）\n            customColorInput.value = selectedColor;\n            customColorText.value = selectedColor;\n            previewTextCallBack();\n        });\n    });\n    // 自定义颜色输入框变化\n    customColorInput.addEventListener('input', function () {\n        var _a;\n        selectedColor = this.value;\n        customColorText.value = selectedColor;\n        previewTextCallBack();\n        // 移除之前选中的样式\n        (_a = document.querySelector('.color-option.border-2')) === null || _a === void 0 ? void 0 : _a.classList.remove('border-2', 'border-white', 'ring-2', 'ring-offset-2', 'ring-primary');\n    });\n    // 自定义颜色文本输入框变化\n    customColorText.addEventListener('input', function () {\n        var _a;\n        // 验证颜色格式\n        const colorRegex = /^#([0-9A-F]{3}){1,2}$/i;\n        if (colorRegex.test(this.value)) {\n            selectedColor = this.value;\n            customColorInput.value = selectedColor;\n            // 移除之前选中的样式\n            (_a = document.querySelector('.color-option.border-2')) === null || _a === void 0 ? void 0 : _a.classList.remove('border-2', 'border-white', 'ring-2', 'ring-offset-2', 'ring-primary');\n        }\n    });\n    // 确定配置\n    applyBtn.addEventListener('click', () => {\n        animationInterval && clearInterval(animationInterval);\n        canvas && canvas.remove();\n        rainCode(textInput.value, selectedColor);\n    });\n    // 监听文本\n    textInput.addEventListener('input', (e) => {\n        const target = e.target;\n        previewTextCallBack(target.value || '预览文本');\n    });\n    function previewTextCallBack(str = textInput.value) {\n        const text = (str === null || str === void 0 ? void 0 : str.trim()) || '预览文本';\n        previewText.textContent = text;\n        previewText.style.color = selectedColor;\n        // 添加动画效果\n        previewText.classList.add('animate-pulse');\n        setTimeout(() => {\n            previewText.classList.remove('animate-pulse');\n        }, 500);\n    }\n    // 默认选中黑色\n    colorOptions[3].click();\n    // 添加悬停效果\n    const colorInputs = [customColorInput, customColorText];\n    colorInputs.forEach(input => {\n        input.addEventListener('focus', function () {\n            this.classList.add('ring-2', 'ring-primary/50');\n        });\n        input.addEventListener('blur', function () {\n            this.classList.remove('ring-2', 'ring-primary/50');\n        });\n    });\n    // 拖动功能\n    panelHeader.addEventListener('mousedown', startDrag);\n    panelHeader.addEventListener('touchstart', startDrag, { passive: false });\n    document.addEventListener('mousemove', drag);\n    document.addEventListener('touchmove', drag, { passive: false });\n    document.addEventListener('mouseup', stopDrag);\n    document.addEventListener('touchend', stopDrag);\n    function startDrag(e) {\n        e.preventDefault();\n        isDragging = true;\n        panelHeader.classList.add('cursor-grabbing');\n        if (e.type === 'mousedown') {\n            initialX = e.clientX;\n            initialY = e.clientY;\n        }\n        else {\n            initialX = e.touches[0].clientX;\n            initialY = e.touches[0].clientY;\n        }\n        const rect = floatingPanel.getBoundingClientRect();\n        offsetX = initialX - rect.left;\n        offsetY = initialY - rect.top;\n    }\n    function drag(e) {\n        if (!isDragging)\n            return;\n        e.preventDefault();\n        let clientX, clientY;\n        if (e.type === 'mousemove') {\n            clientX = e.clientX;\n            clientY = e.clientY;\n        }\n        else {\n            clientX = e.touches[0].clientX;\n            clientY = e.touches[0].clientY;\n        }\n        const x = clientX - offsetX;\n        const y = clientY - offsetY;\n        // 确保面板不会被拖出视口\n        const maxX = window.innerWidth - floatingPanel.offsetWidth;\n        const maxY = window.innerHeight - floatingPanel.offsetHeight;\n        const boundedX = Math.max(0, Math.min(x, maxX));\n        const boundedY = Math.max(0, Math.min(y, maxY));\n        floatingPanel.style.left = `${boundedX}px`;\n        floatingPanel.style.top = `${boundedY}px`;\n        floatingPanel.style.transform = 'none';\n    }\n    function stopDrag() {\n        isDragging = false;\n        panelHeader.classList.remove('cursor-grabbing');\n        panelHeader.classList.add('cursor-grab');\n    }\n    // 最小化按钮\n    minimizeBtn.addEventListener('click', function () {\n        floatingPanel.classList.add('scale-0', 'opacity-0');\n        floatingPanel.classList.remove('scale-100', 'opacity-100');\n        setTimeout(() => {\n            restoreBtn.classList.remove('opacity-0', 'pointer-events-none');\n            restoreBtn.classList.add('opacity-100', 'pointer-events-auto');\n        }, 300);\n    });\n    // 恢复按钮\n    restoreBtn.addEventListener('click', function () {\n        restoreBtn.classList.add('opacity-0', 'pointer-events-none');\n        restoreBtn.classList.remove('opacity-100', 'pointer-events-auto');\n        setTimeout(() => {\n            floatingPanel.classList.remove('scale-0', 'opacity-0');\n            floatingPanel.classList.add('scale-100', 'opacity-100');\n        }, 100);\n    });\n    // 关闭按钮\n    closeBtn.addEventListener('click', function () {\n        floatingPanel.classList.add('scale-0', 'opacity-0');\n        floatingPanel.classList.remove('scale-100', 'opacity-100');\n        setTimeout(() => {\n            restoreBtn.classList.remove('opacity-0', 'pointer-events-none');\n            restoreBtn.classList.add('opacity-100', 'pointer-events-auto');\n        }, 300);\n    });\n}\n// 确保文档加载完成后执行\ndocument.addEventListener('DOMContentLoaded', () => {\n    document.body.style.margin = \"0px\";\n    document.body.style.padding = \"0px\";\n    rainCode();\n    setting();\n});\ndocument.addEventListener(\"beforeunload\", () => {\n    animationInterval && clearInterval(animationInterval);\n    canvas && canvas.remove();\n});\n\n\n//# sourceURL=webpack://coderain/./src/index.ts?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/index.ts"]();
/******/ 	
/******/ })()
;